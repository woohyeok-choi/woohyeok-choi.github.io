{"version":3,"sources":["webpack:///./src/pages/blog22.tsx","webpack:///./src/utils.ts","webpack:///./src/components/layout.tsx","webpack:///./src/components/blog-categories.tsx","webpack:///./src/components/blog-tags.tsx","webpack:///./node_modules/semantic-ui-react/dist/es/collections/Grid/GridColumn.js","webpack:///./node_modules/semantic-ui-react/dist/es/collections/Grid/GridRow.js","webpack:///./node_modules/semantic-ui-react/dist/es/collections/Grid/Grid.js","webpack:///./node_modules/semantic-ui-react/dist/es/elements/Segment/SegmentGroup.js","webpack:///./node_modules/semantic-ui-react/dist/es/elements/Segment/SegmentInline.js","webpack:///./node_modules/semantic-ui-react/dist/es/elements/Segment/Segment.js"],"names":["__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","_components_layout__WEBPACK_IMPORTED_MODULE_1__","_components_blog_categories__WEBPACK_IMPORTED_MODULE_2__","_components_blog_tags__WEBPACK_IMPORTED_MODULE_3__","semantic_ui_react__WEBPACK_IMPORTED_MODULE_4__","semantic_ui_react__WEBPACK_IMPORTED_MODULE_5__","semantic_ui_react__WEBPACK_IMPORTED_MODULE_6__","Column","width","d","formatReadableDate","formatPagePath","change_case__WEBPACK_IMPORTED_MODULE_0__","moment__WEBPACK_IMPORTED_MODULE_1__","date","moment","format","index","paramType","param","basePath","paramPath","changeCase","Layout","_ref","children","BlogCategories","items","_ref$activeCategory","activeCategory","category","react__WEBPACK_IMPORTED_MODULE_3__","link","bulleted","map","_ref2","count","Item","key","href","active","props","categories","_public_static_d_243471705_json__WEBPACK_IMPORTED_MODULE_2__","data","totalCount","group","concat","_ref3","fieldValue","Object","assign","BlogTags","react__WEBPACK_IMPORTED_MODULE_2__","semantic_ui_react__WEBPACK_IMPORTED_MODULE_3__","Group","tag","as","tags","_public_static_d_84730814_json__WEBPACK_IMPORTED_MODULE_1__","GridColumn","className","computer","color","floated","largeScreen","mobile","only","stretched","tablet","textAlign","verticalAlign","widescreen","classes","classnames_default","classNameBuilders","rest","getUnhandledProps","ElementType","getElementType","react_default","a","createElement","extends_default","handledProps","propTypes","create","factories","Grid_GridColumn","GridRow","centered","columns","divided","reversed","Grid_GridRow","Grid","celled","container","doubling","inverted","padded","relaxed","stackable","Row","SegmentGroup","compact","content","horizontal","piled","raised","size","stacked","lib","isNil","Segment_SegmentGroup","SegmentInline","Segment_SegmentInline","Segment","attached","basic","circular","clearing","disabled","loading","placeholder","secondary","tertiary","vertical","Inline"],"mappings":"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","file":"component---src-pages-blog-22-tsx-bad1a04d99490cc9e1b0.js","sourcesContent":["import * as React from \"react\"\nimport Layout from \"../components/layout\"\nimport BlogCategories from \"../components/blog-categories\"\nimport BlogTags from \"../components/blog-tags\"\nimport { Container, Grid, Segment } from \"semantic-ui-react\"\n\nexport default () => {\n  return (\n    <Layout>\n      <Container>\n        <Grid>\n          <Grid.Column width={4}>\n            <Segment>\n              <BlogCategories/>\n            </Segment>\n          </Grid.Column>\n          <Grid.Column width={8}>\n            MAIN\n          </Grid.Column>\n          <Grid.Column width={4}>\n            <Segment>\n              <BlogTags/>\n            </Segment>\n            <Segment>\n            </Segment>\n          </Grid.Column>\n        </Grid>\n      </Container>\n    </Layout>\n  )\n}","import * as changeCase from \"change-case\"\nimport * as moment from \"moment\"\n\ntype ParamType = \"category\" | \"tag\" | \"none\"\n\nexport const formatBlogCategoryPath = (name: string) : string  => `/blog/categories/${changeCase.paramCase(name)}`\n\nexport const formatBlogTagPath = (name: string) : string => `/blog/tags/${changeCase.paramCase(name)}`\n\nexport const formatReadableDate = (date: string) : string => moment(`${date}`, \"YYYY-MM-DD HH:mm\").format(\"MMMM Do, YYYY HH:mm\")\n\nexport const formatUrlDate = (date: string) : string => moment(`${date}`, \"YYYY-MM-DD HH:mm\").format(\"YYYY-MM-DD-HH-mm\")\n\nexport const formatPostPath = (date: string, title: string, paramType: ParamType | string, param?: string | null) : string => {\n  let basePath = \"/blog\"\n  const paramPath = param ? changeCase.paramCase(param) : \"\"\n\n  if (paramType === \"category\") {\n    basePath = `/blog/categories/${paramPath}`\n  } else if (paramType === \"tag\") {\n    basePath = `/blog/tags/${paramPath}`\n  }\n\n  return `${basePath}/posts/${formatUrlDate(date)}-${changeCase.paramCase(title)}`\n}\n\nexport const formatPagePath = (index: number = 0, paramType: ParamType | string, param?: string | null) : string => {\n  let basePath = \"/blog\"\n  const paramPath = param ? changeCase.paramCase(param) : \"\"\n\n  if (paramType === \"category\") {\n    basePath = `/blog/categories/${paramPath}`\n  } else if (paramType === \"tag\") {\n    basePath = `/blog/tags/${paramPath}`\n  }\n\n  if (index !== 0) {\n    basePath = `${basePath}/pages/${index + 1}`\n  }\n\n  return basePath\n}\n\n\n\n\n","import * as React from 'react'\nimport 'semantic-ui-css/semantic.min.css'\nimport \"slick-carousel/slick/slick.css\";\nimport \"slick-carousel/slick/slick-theme.css\"\nimport '../layout.css'\n\nconst Layout: React.FunctionComponent<Props> = ({\n  children\n}) => {\n  return (\n    <div>\n      { children }\n    </div>\n  )\n}\n\ninterface Props {\n  children: React.ReactNode\n}\n\nexport default Layout","import * as React from \"react\"\nimport { List } from \"semantic-ui-react\"\nimport { graphql, useStaticQuery } from \"gatsby\"\nimport { formatPagePath } from \"../utils\"\n\nconst BlogCategories: React.FunctionComponent<Props> = ({ items, activeCategory = items[0].category }) => {\n  return (\n    <List link bulleted>\n      {\n        items.map(({ category, link, count }) =>\n          <List.Item key={category}\n                     href={link}\n                     active={activeCategory === category}>\n            {category} ({count})\n          </List.Item>,\n        )\n      }\n    </List>\n  )\n}\n\nexport default (props: DefaultProps) => {\n  const { categories }: QueryResult = useStaticQuery(graphql`\n    query {\n      categories: allMarkdownRemark {\n        group(field: frontmatter___category) {\n          fieldValue\n          totalCount\n        }\n        totalCount\n      }\n    }`,\n  )\n  const { totalCount, group } = categories\n  const items = [\n    {\n      category: \"All\",\n      count: totalCount,\n      link: formatPagePath(0, \"none\"),\n    },\n    ...group.map(({ fieldValue, totalCount }) => ({\n      category: fieldValue,\n      count: totalCount,\n      link: formatPagePath(0, \"category\", fieldValue),\n    })),\n  ]\n\n  return (\n    <BlogCategories items={items} {...props} />\n  )\n}\n\ninterface QueryResult {\n  categories: {\n    group: Array<{\n      fieldValue\n      totalCount\n    }>\n    totalCount: number\n  }\n}\n\ninterface DefaultProps {\n  activeCategory?: string\n}\n\ninterface Props extends DefaultProps {\n  items: Array<{\n    category: string\n    count?: number\n    link?: string\n  }>\n}","import * as React from \"react\"\nimport { Label } from \"semantic-ui-react\"\nimport { graphql, useStaticQuery } from \"gatsby\"\nimport { formatPagePath } from \"../utils\"\n\nconst BlogTags: React.FunctionComponent<Props> = ({ items }) => {\n  return (\n    <Label.Group>\n      {\n        items.map(({ tag, link, count }) =>\n          <Label key={tag} as={\"a\"} href={link}>\n            {tag} ({count})\n          </Label>,\n        )\n      }\n    </Label.Group>\n  )\n}\n\nexport default () => {\n  const { tags }: QueryResult = useStaticQuery(graphql`\n    query {\n      tags: allMarkdownRemark {\n        group(field: frontmatter___tags) {\n          fieldValue\n          totalCount\n        }\n      }\n    }`,\n  )\n  return (\n    <BlogTags items={\n      tags.group.map(({ fieldValue, totalCount }) => ({\n        tag: fieldValue,\n        count: totalCount,\n        link: formatPagePath(0, \"tag\", fieldValue),\n      }))\n    }/>\n  )\n}\n\n\ninterface QueryResult {\n  tags: {\n    group: Array<{\n      fieldValue: string\n      totalCount: number\n    }>\n  }\n}\n\ninterface Props {\n  items: Array<{\n    tag: string\n    count: number\n    link?: string\n  }>\n}","import _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { customPropTypes, createShorthandFactory, getElementType, getUnhandledProps, SUI, useKeyOnly, useMultipleProp, useTextAlignProp, useValueAndKey, useVerticalAlignProp, useWidthProp } from '../../lib';\n/**\n * A column sub-component for Grid.\n */\n\nfunction GridColumn(props) {\n  var children = props.children,\n      className = props.className,\n      computer = props.computer,\n      color = props.color,\n      floated = props.floated,\n      largeScreen = props.largeScreen,\n      mobile = props.mobile,\n      only = props.only,\n      stretched = props.stretched,\n      tablet = props.tablet,\n      textAlign = props.textAlign,\n      verticalAlign = props.verticalAlign,\n      widescreen = props.widescreen,\n      width = props.width;\n  var classes = cx(color, useKeyOnly(stretched, 'stretched'), useMultipleProp(only, 'only'), useTextAlignProp(textAlign), useValueAndKey(floated, 'floated'), useVerticalAlignProp(verticalAlign), useWidthProp(computer, 'wide computer'), useWidthProp(largeScreen, 'wide large screen'), useWidthProp(mobile, 'wide mobile'), useWidthProp(tablet, 'wide tablet'), useWidthProp(widescreen, 'wide widescreen'), useWidthProp(width, 'wide'), 'column', className);\n  var rest = getUnhandledProps(GridColumn, props);\n  var ElementType = getElementType(GridColumn, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), children);\n}\n\nGridColumn.handledProps = [\"as\", \"children\", \"className\", \"color\", \"computer\", \"floated\", \"largeScreen\", \"mobile\", \"only\", \"stretched\", \"tablet\", \"textAlign\", \"verticalAlign\", \"widescreen\", \"width\"];\nGridColumn.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A grid column can be colored. */\n  color: PropTypes.oneOf(SUI.COLORS),\n\n  /** A column can specify a width for a computer. */\n  computer: customPropTypes.every([customPropTypes.disallow(['width']), PropTypes.oneOf(SUI.WIDTHS)]),\n\n  /** A column can sit flush against the left or right edge of a row. */\n  floated: PropTypes.oneOf(SUI.FLOATS),\n\n  /** A column can specify a width for a large screen device. */\n  largeScreen: customPropTypes.every([customPropTypes.disallow(['width']), PropTypes.oneOf(SUI.WIDTHS)]),\n\n  /** A column can specify a width for a mobile device. */\n  mobile: customPropTypes.every([customPropTypes.disallow(['width']), PropTypes.oneOf(SUI.WIDTHS)]),\n\n  /** A column can appear only for a specific device, or screen sizes. */\n  only: customPropTypes.multipleProp(SUI.VISIBILITY),\n\n  /** A column can stretch its contents to take up the entire grid or row height. */\n  stretched: PropTypes.bool,\n\n  /** A column can specify a width for a tablet device. */\n  tablet: customPropTypes.every([customPropTypes.disallow(['width']), PropTypes.oneOf(SUI.WIDTHS)]),\n\n  /** A column can specify its text alignment. */\n  textAlign: PropTypes.oneOf(SUI.TEXT_ALIGNMENTS),\n\n  /** A column can specify its vertical alignment to have all its columns vertically centered. */\n  verticalAlign: PropTypes.oneOf(SUI.VERTICAL_ALIGNMENTS),\n\n  /** A column can specify a width for a wide screen device. */\n  widescreen: customPropTypes.every([customPropTypes.disallow(['width']), PropTypes.oneOf(SUI.WIDTHS)]),\n\n  /** Represents width of column. */\n  width: customPropTypes.every([customPropTypes.disallow(['computer', 'largeScreen', 'mobile', 'tablet', 'widescreen']), PropTypes.oneOf(SUI.WIDTHS)])\n} : {};\nGridColumn.create = createShorthandFactory(GridColumn, function (children) {\n  return {\n    children: children\n  };\n});\nexport default GridColumn;","import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useMultipleProp, useTextAlignProp, useVerticalAlignProp, useWidthProp } from '../../lib';\n/**\n * A row sub-component for Grid.\n */\n\nfunction GridRow(props) {\n  var centered = props.centered,\n      children = props.children,\n      className = props.className,\n      color = props.color,\n      columns = props.columns,\n      divided = props.divided,\n      only = props.only,\n      reversed = props.reversed,\n      stretched = props.stretched,\n      textAlign = props.textAlign,\n      verticalAlign = props.verticalAlign;\n  var classes = cx(color, useKeyOnly(centered, 'centered'), useKeyOnly(divided, 'divided'), useKeyOnly(stretched, 'stretched'), useMultipleProp(only, 'only'), useMultipleProp(reversed, 'reversed'), useTextAlignProp(textAlign), useVerticalAlignProp(verticalAlign), useWidthProp(columns, 'column', true), 'row', className);\n  var rest = getUnhandledProps(GridRow, props);\n  var ElementType = getElementType(GridRow, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), children);\n}\n\nGridRow.handledProps = [\"as\", \"centered\", \"children\", \"className\", \"color\", \"columns\", \"divided\", \"only\", \"reversed\", \"stretched\", \"textAlign\", \"verticalAlign\"];\nGridRow.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** A row can have its columns centered. */\n  centered: PropTypes.bool,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A grid row can be colored. */\n  color: PropTypes.oneOf(SUI.COLORS),\n\n  /** Represents column count per line in Row. */\n  columns: PropTypes.oneOf(_toConsumableArray(SUI.WIDTHS).concat(['equal'])),\n\n  /** A row can have dividers between its columns. */\n  divided: PropTypes.bool,\n\n  /** A row can appear only for a specific device, or screen sizes. */\n  only: customPropTypes.multipleProp(SUI.VISIBILITY),\n\n  /** A row can specify that its columns should reverse order at different device sizes. */\n  reversed: customPropTypes.multipleProp(['computer', 'computer vertically', 'mobile', 'mobile vertically', 'tablet', 'tablet vertically']),\n\n  /** A row can stretch its contents to take up the entire column height. */\n  stretched: PropTypes.bool,\n\n  /** A row can specify its text alignment. */\n  textAlign: PropTypes.oneOf(SUI.TEXT_ALIGNMENTS),\n\n  /** A row can specify its vertical alignment to have all its columns vertically centered. */\n  verticalAlign: PropTypes.oneOf(SUI.VERTICAL_ALIGNMENTS)\n} : {};\nexport default GridRow;","import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useKeyOrValueAndKey, useMultipleProp, useTextAlignProp, useVerticalAlignProp, useWidthProp } from '../../lib';\nimport GridColumn from './GridColumn';\nimport GridRow from './GridRow';\n/**\n * A grid is used to harmonize negative space in a layout.\n */\n\nfunction Grid(props) {\n  var celled = props.celled,\n      centered = props.centered,\n      children = props.children,\n      className = props.className,\n      columns = props.columns,\n      container = props.container,\n      divided = props.divided,\n      doubling = props.doubling,\n      inverted = props.inverted,\n      padded = props.padded,\n      relaxed = props.relaxed,\n      reversed = props.reversed,\n      stackable = props.stackable,\n      stretched = props.stretched,\n      textAlign = props.textAlign,\n      verticalAlign = props.verticalAlign;\n  var classes = cx('ui', useKeyOnly(centered, 'centered'), useKeyOnly(container, 'container'), useKeyOnly(doubling, 'doubling'), useKeyOnly(inverted, 'inverted'), useKeyOnly(stackable, 'stackable'), useKeyOnly(stretched, 'stretched'), useKeyOrValueAndKey(celled, 'celled'), useKeyOrValueAndKey(divided, 'divided'), useKeyOrValueAndKey(padded, 'padded'), useKeyOrValueAndKey(relaxed, 'relaxed'), useMultipleProp(reversed, 'reversed'), useTextAlignProp(textAlign), useVerticalAlignProp(verticalAlign), useWidthProp(columns, 'column', true), 'grid', className);\n  var rest = getUnhandledProps(Grid, props);\n  var ElementType = getElementType(Grid, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), children);\n}\n\nGrid.handledProps = [\"as\", \"celled\", \"centered\", \"children\", \"className\", \"columns\", \"container\", \"divided\", \"doubling\", \"inverted\", \"padded\", \"relaxed\", \"reversed\", \"stackable\", \"stretched\", \"textAlign\", \"verticalAlign\"];\nGrid.Column = GridColumn;\nGrid.Row = GridRow;\nGrid.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** A grid can have rows divided into cells. */\n  celled: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['internally'])]),\n\n  /** A grid can have its columns centered. */\n  centered: PropTypes.bool,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Represents column count per row in Grid. */\n  columns: PropTypes.oneOf(_toConsumableArray(SUI.WIDTHS).concat(['equal'])),\n\n  /** A grid can be combined with a container to use the available layout and alignment. */\n  container: PropTypes.bool,\n\n  /** A grid can have dividers between its columns. */\n  divided: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['vertically'])]),\n\n  /** A grid can double its column width on tablet and mobile sizes. */\n  doubling: PropTypes.bool,\n\n  /** A grid's colors can be inverted. */\n  inverted: PropTypes.bool,\n\n  /** A grid can preserve its vertical and horizontal gutters on first and last columns. */\n  padded: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['horizontally', 'vertically'])]),\n\n  /** A grid can increase its gutters to allow for more negative space. */\n  relaxed: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['very'])]),\n\n  /** A grid can specify that its columns should reverse order at different device sizes. */\n  reversed: customPropTypes.multipleProp(['computer', 'computer vertically', 'mobile', 'mobile vertically', 'tablet', 'tablet vertically']),\n\n  /** A grid can have its columns stack on-top of each other after reaching mobile breakpoints. */\n  stackable: PropTypes.bool,\n\n  /** A grid can stretch its contents to take up the entire grid height. */\n  stretched: PropTypes.bool,\n\n  /** A grid can specify its text alignment. */\n  textAlign: PropTypes.oneOf(SUI.TEXT_ALIGNMENTS),\n\n  /** A grid can specify its vertical alignment to have all its columns vertically centered. */\n  verticalAlign: PropTypes.oneOf(SUI.VERTICAL_ALIGNMENTS)\n} : {};\nexport default Grid;","import _extends from \"@babel/runtime/helpers/extends\";\nimport _without from \"lodash/without\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly } from '../../lib';\n/**\n * A group of segments can be formatted to appear together.\n */\n\nfunction SegmentGroup(props) {\n  var children = props.children,\n      className = props.className,\n      compact = props.compact,\n      content = props.content,\n      horizontal = props.horizontal,\n      piled = props.piled,\n      raised = props.raised,\n      size = props.size,\n      stacked = props.stacked;\n  var classes = cx('ui', size, useKeyOnly(compact, 'compact'), useKeyOnly(horizontal, 'horizontal'), useKeyOnly(piled, 'piled'), useKeyOnly(raised, 'raised'), useKeyOnly(stacked, 'stacked'), 'segments', className);\n  var rest = getUnhandledProps(SegmentGroup, props);\n  var ElementType = getElementType(SegmentGroup, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nSegmentGroup.handledProps = [\"as\", \"children\", \"className\", \"compact\", \"content\", \"horizontal\", \"piled\", \"raised\", \"size\", \"stacked\"];\nSegmentGroup.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A segment may take up only as much space as is necessary. */\n  compact: PropTypes.bool,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** Formats content to be aligned horizontally. */\n  horizontal: PropTypes.bool,\n\n  /** Formatted to look like a pile of pages. */\n  piled: PropTypes.bool,\n\n  /** A segment group may be formatted to raise above the page. */\n  raised: PropTypes.bool,\n\n  /** A segment group can have different sizes. */\n  size: PropTypes.oneOf(_without(SUI.SIZES, 'medium')),\n\n  /** Formatted to show it contains multiple pages. */\n  stacked: PropTypes.bool\n} : {};\nexport default SegmentGroup;","import _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps } from '../../lib';\n/**\n * A placeholder segment can be inline.\n */\n\nfunction SegmentInline(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content;\n  var classes = cx('inline', className);\n  var rest = getUnhandledProps(SegmentInline, props);\n  var ElementType = getElementType(SegmentInline, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nSegmentInline.handledProps = [\"as\", \"children\", \"className\", \"content\"];\nSegmentInline.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand\n} : {};\nexport default SegmentInline;","import _extends from \"@babel/runtime/helpers/extends\";\nimport _without from \"lodash/without\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useKeyOrValueAndKey, useTextAlignProp, useValueAndKey } from '../../lib';\nimport SegmentGroup from './SegmentGroup';\nimport SegmentInline from './SegmentInline';\n/**\n * A segment is used to create a grouping of related content.\n */\n\nfunction Segment(props) {\n  var attached = props.attached,\n      basic = props.basic,\n      children = props.children,\n      circular = props.circular,\n      className = props.className,\n      clearing = props.clearing,\n      color = props.color,\n      compact = props.compact,\n      content = props.content,\n      disabled = props.disabled,\n      floated = props.floated,\n      inverted = props.inverted,\n      loading = props.loading,\n      placeholder = props.placeholder,\n      padded = props.padded,\n      piled = props.piled,\n      raised = props.raised,\n      secondary = props.secondary,\n      size = props.size,\n      stacked = props.stacked,\n      tertiary = props.tertiary,\n      textAlign = props.textAlign,\n      vertical = props.vertical;\n  var classes = cx('ui', color, size, useKeyOnly(basic, 'basic'), useKeyOnly(circular, 'circular'), useKeyOnly(clearing, 'clearing'), useKeyOnly(compact, 'compact'), useKeyOnly(disabled, 'disabled'), useKeyOnly(inverted, 'inverted'), useKeyOnly(loading, 'loading'), useKeyOnly(placeholder, 'placeholder'), useKeyOnly(piled, 'piled'), useKeyOnly(raised, 'raised'), useKeyOnly(secondary, 'secondary'), useKeyOnly(stacked, 'stacked'), useKeyOnly(tertiary, 'tertiary'), useKeyOnly(vertical, 'vertical'), useKeyOrValueAndKey(attached, 'attached'), useKeyOrValueAndKey(padded, 'padded'), useTextAlignProp(textAlign), useValueAndKey(floated, 'floated'), 'segment', className);\n  var rest = getUnhandledProps(Segment, props);\n  var ElementType = getElementType(Segment, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nSegment.handledProps = [\"as\", \"attached\", \"basic\", \"children\", \"circular\", \"className\", \"clearing\", \"color\", \"compact\", \"content\", \"disabled\", \"floated\", \"inverted\", \"loading\", \"padded\", \"piled\", \"placeholder\", \"raised\", \"secondary\", \"size\", \"stacked\", \"tertiary\", \"textAlign\", \"vertical\"];\nSegment.Group = SegmentGroup;\nSegment.Inline = SegmentInline;\nSegment.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Attach segment to other content, like a header. */\n  attached: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['top', 'bottom'])]),\n\n  /** A basic segment has no special formatting. */\n  basic: PropTypes.bool,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** A segment can be circular. */\n  circular: PropTypes.bool,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A segment can clear floated content. */\n  clearing: PropTypes.bool,\n\n  /** Segment can be colored. */\n  color: PropTypes.oneOf(SUI.COLORS),\n\n  /** A segment may take up only as much space as is necessary. */\n  compact: PropTypes.bool,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** A segment may show its content is disabled. */\n  disabled: PropTypes.bool,\n\n  /** Segment content can be floated to the left or right. */\n  floated: PropTypes.oneOf(SUI.FLOATS),\n\n  /** A segment can have its colors inverted for contrast. */\n  inverted: PropTypes.bool,\n\n  /** A segment may show its content is being loaded. */\n  loading: PropTypes.bool,\n\n  /** A segment can increase its padding. */\n  padded: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['very'])]),\n\n  /** A segment can be used to reserve space for conditionally displayed content. */\n  placeholder: PropTypes.bool,\n\n  /** Formatted to look like a pile of pages. */\n  piled: PropTypes.bool,\n\n  /** A segment may be formatted to raise above the page. */\n  raised: PropTypes.bool,\n\n  /** A segment can be formatted to appear less noticeable. */\n  secondary: PropTypes.bool,\n\n  /** A segment can have different sizes. */\n  size: PropTypes.oneOf(_without(SUI.SIZES, 'medium')),\n\n  /** Formatted to show it contains multiple pages. */\n  stacked: PropTypes.bool,\n\n  /** A segment can be formatted to appear even less noticeable. */\n  tertiary: PropTypes.bool,\n\n  /** Formats content to be aligned as part of a vertical group. */\n  textAlign: PropTypes.oneOf(_without(SUI.TEXT_ALIGNMENTS, 'justified')),\n\n  /** Formats content to be aligned vertically. */\n  vertical: PropTypes.bool\n} : {};\nexport default Segment;"],"sourceRoot":""}