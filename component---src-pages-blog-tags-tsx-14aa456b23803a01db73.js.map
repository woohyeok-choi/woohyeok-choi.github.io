{"version":3,"sources":["webpack:///./src/components/blog/main-tags.tsx","webpack:///./src/pages/blog/tags.tsx","webpack:///./node_modules/core-js/modules/es6.string.starts-with.js"],"names":["alphabet","split","AlphabeticalTagItem","_ref","items","react","Segment","padded","vertical","basic","Header","as","content","Label","Group","sort","_ref2","_ref3","a","tag","b","localeCompare","map","_ref4","count","link","key","href","main_tags","group","_84730814","data","tags","container","dividing","value","filter","_ref5","fieldValue","toLowerCase","startsWith","_ref6","totalCount","formatPagePath","length","main_tags_AlphabeticalTagItem","toUpperCase","__webpack_exports__","layout","seo","title","description","$export","__webpack_require__","toLength","context","$startsWith","P","F","searchString","that","this","index","Math","min","arguments","undefined","search","String","call","slice"],"mappings":"wMAMMA,EAAW,6BAA6BC,MAAM,IAE9CC,EAA0D,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,MAAOJ,EAAVG,EAAUH,SAAV,OAC9DK,EAAA,cAACC,EAAA,EAAD,CAASC,OAAQ,OAAQC,UAAQ,EAACC,OAAK,GACrCJ,EAAA,cAACK,EAAA,EAAD,CAAQC,GAAI,KAAMC,QAASZ,IAC3BK,EAAA,cAACQ,EAAA,EAAMC,MAAP,KAEIV,EAAMW,KAAK,SAAAC,EAAAC,GAAA,IAAOC,EAAPF,EAAEG,IAAeC,EAAjBH,EAAYE,IAAZ,OACR,GAAKD,GAAGG,cAAcD,KACvBE,IAAI,SAAAC,GAAA,IAAGJ,EAAHI,EAAGJ,IAAKK,EAARD,EAAQC,MAAOC,EAAfF,EAAeE,KAAf,OACJpB,EAAA,cAACQ,EAAA,EAAD,CAAOa,IAAKP,EAAKQ,KAAMF,GACpBN,EADH,KACUK,EADV,UASKI,EAAA,WAAM,IAWXC,EAXWC,EAAAC,KACXC,KAUAH,MACR,OACExB,EAAA,cAAC4B,EAAA,EAAD,KACE5B,EAAA,cAACK,EAAA,EAAD,CAAQC,GAAI,KAAMuB,UAAQ,GAA1B,QAEElC,EAASsB,IAAK,SAACa,GACb,IAAMH,EAAOH,EAAMO,OAAQ,SAAAC,GAAA,OAAAA,EAAGC,WACjBC,cAAcC,WAAWL,KACpCb,IAAI,SAAAmB,GAAA,IAAEH,EAAFG,EAAEH,WAAF,MAA+B,CACnCnB,IAAKmB,EACLd,MAFIiB,EAAcC,WAGlBjB,KAAMkB,YAAe,EAAG,MAAOL,MAEjC,GAAIN,GAAQA,EAAKY,OACf,OACEvC,EAAA,cAACwC,EAAD,CAAqBnB,IAAKS,EAAO/B,MAAO4B,EAAMhC,SAAUmC,EAAMW,6BC9C7DC,EAAA,mBACb,OACE1C,EAAA,cAAC2C,EAAA,EAAD,KACE3C,EAAA,cAAC4C,EAAA,EAAD,CAAKC,MAAO,WACPC,YAAW,wDAChB9C,EAAA,cAACuB,EAAD,0CCRN,IAAAwB,EAAcC,EAAQ,IACtBC,EAAeD,EAAQ,IACvBE,EAAcF,EAAQ,IAEtBG,EAAA,cAEAJ,IAAAK,EAAAL,EAAAM,EAAgCL,EAAQ,GAARA,CAHhC,cAG4D,UAC5Db,WAAA,SAAAmB,GACA,IAAAC,EAAAL,EAAAM,KAAAF,EALA,cAMAG,EAAAR,EAAAS,KAAAC,IAAAC,UAAArB,OAAA,EAAAqB,UAAA,QAAAC,EAAAN,EAAAhB,SACAuB,EAAAC,OAAAT,GACA,OAAAH,EACAA,EAAAa,KAAAT,EAAAO,EAAAL,GACAF,EAAAU,MAAAR,IAAAK,EAAAvB,UAAAuB","file":"component---src-pages-blog-tags-tsx-14aa456b23803a01db73.js","sourcesContent":["import * as React from \"react\"\nimport BlogContainer from './container'\nimport { graphql, useStaticQuery } from \"gatsby\"\nimport { Header, Label, Segment } from \"semantic-ui-react\"\nimport { formatPagePath } from \"../../utils\"\n\nconst alphabet = 'abcdefghijklmnopqrstuvwxyz'.split('');\n\nconst AlphabeticalTagItem: React.FunctionComponent<ItemProps> = ({ items, alphabet} : ItemProps) => (\n  <Segment padded={'very'} vertical basic>\n    <Header as={'h3'} content={alphabet}/>\n    <Label.Group>\n      {\n        items.sort(({tag: a}, {tag: b}) =>\n          ('' + a).localeCompare(b)\n        ).map(({ tag, count, link }) =>\n          <Label key={tag} href={link}>\n            {tag} ({count})\n          </Label>\n        )\n      }\n    </Label.Group>\n  </Segment>\n)\n\nexport default () => {\n  const { tags }: QueryResult = useStaticQuery(graphql`\n    query {\n      tags: allMarkdownRemark {\n        group(field: frontmatter___tags) {\n          fieldValue\n          totalCount\n        }\n      }\n    }`,\n  )\n  const { group } = tags\n  return (\n    <BlogContainer>\n      <Header as={'h1'} dividing>Tags</Header>\n      {\n        alphabet.map( (value) => {\n          const tags = group.filter( ({ fieldValue }) =>\n            fieldValue.toLowerCase().startsWith(value)\n          ).map(({fieldValue, totalCount}) => ({\n            tag: fieldValue,\n            count: totalCount,\n            link: formatPagePath(0, \"tag\", fieldValue)\n          }))\n          if (tags && tags.length)\n            return (\n              <AlphabeticalTagItem key={value} items={tags} alphabet={value.toUpperCase()}/>\n            )\n        })\n      }\n    </BlogContainer>\n  )\n}\n\ninterface ItemProps {\n  items: Array<{\n    tag: string\n    count: number\n    link?: string\n  }>\n  alphabet: string\n}\n\ninterface QueryResult {\n  tags: {\n    group: Array<{\n      fieldValue: string\n      totalCount: number\n    }>\n  }\n}\n","import Layout from \"../../components/common/layout\"\nimport BlogAllTags from \"../../components/blog/main-tags\"\nimport * as React from \"react\"\nimport SEO from \"../../components/common/seo\"\n\nexport default () => {\n  return (\n    <Layout>\n      <SEO title={'All tags'}\n           description={`List of tags used in Choi, Woohyeok's personal blog`}/>\n      <BlogAllTags/>\n    </Layout>\n  )\n}","// 21.1.3.18 String.prototype.startsWith(searchString [, position ])\n'use strict';\nvar $export = require('./_export');\nvar toLength = require('./_to-length');\nvar context = require('./_string-context');\nvar STARTS_WITH = 'startsWith';\nvar $startsWith = ''[STARTS_WITH];\n\n$export($export.P + $export.F * require('./_fails-is-regexp')(STARTS_WITH), 'String', {\n  startsWith: function startsWith(searchString /* , position = 0 */) {\n    var that = context(this, searchString, STARTS_WITH);\n    var index = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length));\n    var search = String(searchString);\n    return $startsWith\n      ? $startsWith.call(that, search, index)\n      : that.slice(index, index + search.length) === search;\n  }\n});\n"],"sourceRoot":""}