{"version":3,"sources":["webpack:///./src/templates/blog-list-category.tsx","webpack:///./src/utils.ts","webpack:///./src/components/layout.tsx","webpack:///./src/components/blog-categories.tsx","webpack:///./src/components/blog-tags.tsx","webpack:///./src/components/blog-list-items.tsx","webpack:///./src/components/blog-pagination.tsx"],"names":["__webpack_require__","r","__webpack_exports__","d","query","react__WEBPACK_IMPORTED_MODULE_0__","semantic_ui_react__WEBPACK_IMPORTED_MODULE_1__","semantic_ui_react__WEBPACK_IMPORTED_MODULE_2__","gatsby__WEBPACK_IMPORTED_MODULE_3__","_components_layout__WEBPACK_IMPORTED_MODULE_4__","_components_blog_categories__WEBPACK_IMPORTED_MODULE_5__","_components_blog_tags__WEBPACK_IMPORTED_MODULE_6__","_components_blog_list_items__WEBPACK_IMPORTED_MODULE_7__","_components_blog_pagination__WEBPACK_IMPORTED_MODULE_8__","_utils__WEBPACK_IMPORTED_MODULE_9__","_ref","data","pageContext","Row","Column","width","activeCategory","param","isAlias","items","posts","edges","centered","textAlign","totalPages","totalPage","activePage","currentPage","onPageChange","page","navigate","formatPagePath","formatReadableDate","change_case__WEBPACK_IMPORTED_MODULE_0__","moment__WEBPACK_IMPORTED_MODULE_1__","date","moment","format","index","paramType","basePath","paramPath","changeCase","Layout","children","BlogCategories","_ref$activeCategory","category","react__WEBPACK_IMPORTED_MODULE_3__","semantic_ui_react__WEBPACK_IMPORTED_MODULE_4__","link","bulleted","map","_ref2","count","Item","key","href","active","props","categories","_public_static_d_243471705_json__WEBPACK_IMPORTED_MODULE_2__","totalCount","group","concat","_ref3","fieldValue","Object","assign","BlogTags","react__WEBPACK_IMPORTED_MODULE_2__","semantic_ui_react__WEBPACK_IMPORTED_MODULE_3__","Group","tag","as","tags","_public_static_d_84730814_json__WEBPACK_IMPORTED_MODULE_1__","BlogListItem","node","id","frontmatter","fields","excerpt","title","slug","react__WEBPACK_IMPORTED_MODULE_1__","Content","Header","alias","origin","Meta","Description","Extra","name","size","_props$isAlias","divided","item","ellipsisItem","undefined","boundaryRange","siblingRange","_","prevItem","nextItem"],"mappings":"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","file":"component---src-templates-blog-list-category-tsx-7c8fa778584dadd0db46.js","sourcesContent":["import * as React from 'react'\r\nimport { Container, Grid } from \"semantic-ui-react\"\r\nimport { graphql, navigate } from \"gatsby\"\r\nimport Layout from \"../components/layout\"\r\nimport BlogCategories from \"../components/blog-categories\"\r\nimport BlogTags from \"../components/blog-tags\"\r\nimport BlogList from \"../components/blog-list-items\"\r\nimport BlogPagination from \"../components/blog-pagination\"\r\nimport { MarkdownRemarkNodeType } from \"../types\"\r\nimport { formatPagePath } from \"../utils\"\r\n\r\nexport default ({data, pageContext } : Props) => {\r\n  return (\r\n    <Layout>\r\n      <Container>\r\n        <Grid>\r\n          <Grid.Row>\r\n            <Grid.Column width={3}>\r\n              <BlogCategories activeCategory={pageContext.param}/>\r\n            </Grid.Column>\r\n            <Grid.Column width={10}>\r\n              <BlogList isAlias={false} items={data.posts.edges}/>\r\n            </Grid.Column>\r\n            <Grid.Column width={3}>\r\n              <BlogTags/>\r\n            </Grid.Column>\r\n          </Grid.Row>\r\n          <Grid.Row centered>\r\n            <Grid.Column width={10} textAlign={\"center\"}>\r\n              <BlogPagination totalPages={pageContext.totalPage}\r\n                              activePage={pageContext.currentPage}\r\n                              onPageChange={ page => { navigate(formatPagePath(page - 1, 'category', pageContext.param))} }\r\n              />\r\n            </Grid.Column>\r\n          </Grid.Row>\r\n        </Grid>\r\n      </Container>\r\n    </Layout>\r\n  )\r\n}\r\n\r\n\r\n\r\nexport const query = graphql`\r\n  query listBlogPostsByCategory($skip: Int!, $limit: Int!, $param: String!) {\r\n    posts: allMarkdownRemark(\r\n      sort: {\r\n        fields: frontmatter___date,\r\n        order: DESC\r\n      }\r\n      limit: $limit\r\n      skip: $skip\r\n      filter: {\r\n        frontmatter: {\r\n          category: {\r\n            eq: $param\r\n          }\r\n        }\r\n      }\r\n    ) {\r\n      edges {\r\n        node {\r\n          id\r\n          excerpt\r\n          frontmatter {\r\n            title\r\n            date\r\n          }\r\n          fields {\r\n            slug {\r\n              origin\r\n            }\r\n            category {\r\n              name\r\n              slug\r\n            }\r\n            tags {\r\n              name\r\n              slug\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }`\r\n\r\n\r\ninterface PageContext {\r\n  currentPage: number\r\n  totalPage: number\r\n  limit: number\r\n  skip: number\r\n  param: string\r\n}\r\n\r\ninterface QueryResult {\r\n  posts: {\r\n    edges: Array<MarkdownRemarkNodeType>\r\n  }\r\n}\r\n\r\ninterface Props {\r\n  data: QueryResult\r\n  pageContext: PageContext\r\n}","import * as changeCase from \"change-case\"\nimport * as moment from \"moment\"\n\ntype ParamType = \"category\" | \"tag\" | \"none\"\n\nexport const formatBlogCategoryPath = (name: string) : string  => `/blog/categories/${changeCase.paramCase(name)}`\n\nexport const formatBlogTagPath = (name: string) : string => `/blog/tags/${changeCase.paramCase(name)}`\n\nexport const formatReadableDate = (date: string) : string => moment(`${date}`, \"YYYY-MM-DD HH:mm\").format(\"MMMM Do, YYYY HH:mm\")\n\nexport const formatUrlDate = (date: string) : string => moment(`${date}`, \"YYYY-MM-DD HH:mm\").format(\"YYYY-MM-DD-HH-mm\")\n\nexport const formatPostPath = (date: string, title: string, paramType: ParamType | string, param?: string | null) : string => {\n  let basePath = \"/blog\"\n  const paramPath = param ? changeCase.paramCase(param) : \"\"\n\n  if (paramType === \"category\") {\n    basePath = `/blog/categories/${paramPath}`\n  } else if (paramType === \"tag\") {\n    basePath = `/blog/tags/${paramPath}`\n  }\n\n  return `${basePath}/posts/${formatUrlDate(date)}-${changeCase.paramCase(title)}`\n}\n\nexport const formatPagePath = (index: number = 0, paramType: ParamType | string, param?: string | null) : string => {\n  let basePath = \"/blog\"\n  const paramPath = param ? changeCase.paramCase(param) : \"\"\n\n  if (paramType === \"category\") {\n    basePath = `/blog/categories/${paramPath}`\n  } else if (paramType === \"tag\") {\n    basePath = `/blog/tags/${paramPath}`\n  }\n\n  if (index !== 0) {\n    basePath = `${basePath}/pages/${index + 1}`\n  }\n\n  return basePath\n}\n\n\n\n\n","import * as React from 'react'\nimport 'semantic-ui-css/semantic.min.css'\nimport \"slick-carousel/slick/slick.css\";\nimport \"slick-carousel/slick/slick-theme.css\"\nimport '../layout.css'\n\nconst Layout: React.FunctionComponent<Props> = ({\n  children\n}) => {\n  return (\n    <div>\n      { children }\n    </div>\n  )\n}\n\ninterface Props {\n  children: React.ReactNode\n}\n\nexport default Layout","import * as React from \"react\"\nimport { List } from \"semantic-ui-react\"\nimport { graphql, useStaticQuery } from \"gatsby\"\nimport { formatPagePath } from \"../utils\"\n\nconst BlogCategories: React.FunctionComponent<Props> = ({ items, activeCategory = items[0].category }) => {\n  return (\n    <List link bulleted>\n      {\n        items.map(({ category, link, count }) =>\n          <List.Item key={category}\n                     href={link}\n                     active={activeCategory === category}>\n            {category} ({count})\n          </List.Item>,\n        )\n      }\n    </List>\n  )\n}\n\nexport default (props: DefaultProps) => {\n  const { categories }: QueryResult = useStaticQuery(graphql`\n    query {\n      categories: allMarkdownRemark {\n        group(field: frontmatter___category) {\n          fieldValue\n          totalCount\n        }\n        totalCount\n      }\n    }`,\n  )\n  const { totalCount, group } = categories\n  const items = [\n    {\n      category: \"All\",\n      count: totalCount,\n      link: formatPagePath(0, \"none\"),\n    },\n    ...group.map(({ fieldValue, totalCount }) => ({\n      category: fieldValue,\n      count: totalCount,\n      link: formatPagePath(0, \"category\", fieldValue),\n    })),\n  ]\n\n  return (\n    <BlogCategories items={items} {...props} />\n  )\n}\n\ninterface QueryResult {\n  categories: {\n    group: Array<{\n      fieldValue\n      totalCount\n    }>\n    totalCount: number\n  }\n}\n\ninterface DefaultProps {\n  activeCategory?: string\n}\n\ninterface Props extends DefaultProps {\n  items: Array<{\n    category: string\n    count?: number\n    link?: string\n  }>\n}","import * as React from \"react\"\nimport { Label } from \"semantic-ui-react\"\nimport { graphql, useStaticQuery } from \"gatsby\"\nimport { formatPagePath } from \"../utils\"\n\nconst BlogTags: React.FunctionComponent<Props> = ({ items }) => {\n  return (\n    <Label.Group>\n      {\n        items.map(({ tag, link, count }) =>\n          <Label key={tag} as={\"a\"} href={link}>\n            {tag} ({count})\n          </Label>,\n        )\n      }\n    </Label.Group>\n  )\n}\n\nexport default () => {\n  const { tags }: QueryResult = useStaticQuery(graphql`\n    query {\n      tags: allMarkdownRemark {\n        group(field: frontmatter___tags) {\n          fieldValue\n          totalCount\n        }\n      }\n    }`,\n  )\n  return (\n    <BlogTags items={\n      tags.group.map(({ fieldValue, totalCount }) => ({\n        tag: fieldValue,\n        count: totalCount,\n        link: formatPagePath(0, \"tag\", fieldValue),\n      }))\n    }/>\n  )\n}\n\n\ninterface QueryResult {\n  tags: {\n    group: Array<{\n      fieldValue: string\n      totalCount: number\n    }>\n  }\n}\n\ninterface Props {\n  items: Array<{\n    tag: string\n    count: number\n    link?: string\n  }>\n}","import * as React from \"react\"\r\nimport { MarkdownRemarkNodeType } from \"../types\"\r\nimport { Label, Item } from \"semantic-ui-react\"\r\nimport { formatReadableDate } from \"../utils\"\r\n\r\nconst BlogListItem: React.FunctionComponent<ItemProps> = ({ data, isAlias }) => {\r\n  const { node } = data\r\n  const { id, frontmatter, fields, excerpt } = node\r\n  const { title, date } = frontmatter\r\n  const { slug, category, tags } = fields\r\n\r\n  return (\r\n   <Item key={id}>\r\n     <Item.Content>\r\n       <Item.Header as={'a'} href={isAlias ? slug.alias : slug.origin }>\r\n         {title}\r\n       </Item.Header>\r\n       <Item.Meta>\r\n         {formatReadableDate(date)}\r\n       </Item.Meta>\r\n       <Item.Description>\r\n         {excerpt}\r\n       </Item.Description>\r\n       <Item.Extra>\r\n         <p>\r\n           Category: <a href={category.slug}>{category.name}</a>\r\n         </p>\r\n         <p>\r\n           {tags &&\r\n           <Label.Group>\r\n             {tags.map(({slug, name}) => <Label size={\"mini\"} as='a' href={slug}>{name}</Label>)}\r\n           </Label.Group>\r\n           }\r\n         </p>\r\n       </Item.Extra>\r\n     </Item.Content>\r\n   </Item>\r\n  )\r\n}\r\n\r\n\r\nexport default (props : Props) => {\r\n  const { isAlias = false, items } = props\r\n  return (\r\n    <Item.Group divided>\r\n      {\r\n        items.map(item => <BlogListItem data={item} isAlias={isAlias}/>)\r\n      }\r\n    </Item.Group>\r\n  )\r\n}\r\n\r\ninterface Props {\r\n  isAlias: boolean\r\n  items: Array<MarkdownRemarkNodeType>\r\n}\r\n\r\ninterface ItemProps {\r\n  isAlias: boolean\r\n  data: MarkdownRemarkNodeType\r\n}","import * as React from 'react'\nimport { Pagination } from \"semantic-ui-react\"\n\ninterface Props {\n  totalPages: number\n  activePage: number\n  onPageChange?: (number) => void\n}\n\nexport default (props: Props) => <Pagination totalPages={props.totalPages}\n                                             activePage={props.activePage}\n                                             ellipsisItem={undefined}\n                                             boundaryRange={0}\n                                             siblingRange={2}\n                                             onPageChange={(_, { activePage }) => props.onPageChange(activePage)}\n                                             prevItem={undefined}\n                                             nextItem={undefined}/>"],"sourceRoot":""}