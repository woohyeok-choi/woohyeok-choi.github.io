{"version":3,"sources":["webpack:///./src/components/blog/post-tags.tsx","webpack:///./src/pages/blog/tags.tsx"],"names":["alphabet","split","AlphabeticalTagItem","items","Segment","padded","vertical","basic","Header","as","content","Label","Group","sort","a","tag","b","localeCompare","map","count","link","key","href","Content","group","tags","dividing","value","filter","fieldValue","toLowerCase","startsWith","totalCount","formatPagePath","length","toUpperCase","withScreenSize","screenSize","children","title","description"],"mappings":"4PAOMA,EAAW,6BAA6BC,MAAM,IAE9CC,EAA0D,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOH,EAAV,EAAUA,SAAV,OAC9D,gBAACI,EAAA,EAAD,CAASC,OAAQ,OAAQC,UAAQ,EAACC,OAAK,GACrC,gBAACC,EAAA,EAAD,CAAQC,GAAI,KAAMC,QAASV,IAC3B,gBAACW,EAAA,EAAMC,MAAP,KAEIT,EAAMU,MAAK,kBAAQC,EAAR,EAAGC,IAAiBC,EAApB,EAAeD,IAAf,OACR,GAAKD,GAAGG,cAAcD,MACvBE,KAAI,gBAAGH,EAAH,EAAGA,IAAKI,EAAR,EAAQA,MAAOC,EAAf,EAAeA,KAAf,OACJ,gBAACT,EAAA,EAAD,CAAOU,IAAKN,EAAKO,KAAMF,GACpBL,EADH,KACUI,EADV,WASJI,EAAuC,WAAM,IAWzCC,EAXyC,OACzCC,KAUAD,MAER,OACE,2BACE,gBAAChB,EAAA,EAAD,CAAQC,GAAI,KAAMiB,UAAQ,GAA1B,QAEE1B,EAASkB,KAAI,SAACS,GACZ,IAAMF,EAAOD,EAAMI,QAAO,qBAAGC,WAChBC,cAAcC,WAAWJ,MACpCT,KAAI,gBAAGW,EAAH,EAAGA,WAAH,MAAiC,CACrCd,IAAKc,EACLV,MAFI,EAAea,WAGnBZ,KAAMa,YAAe,EAAG,MAAOJ,OAEjC,GAAIJ,GAAQA,EAAKS,OACf,OACE,gBAAC,EAAD,CAAqBb,IAAKM,EAAOxB,MAAOsB,EAAMzB,SAAU2B,EAAMQ,qBAkB7DC,eAT2C,SAAC,GAA0B,IAAxBC,EAAwB,EAAxBA,WACrD3B,EAAU,gBAAC,EAAD,MAChB,MACiB,WAAf2B,EACE,gBAAC,IAAD,CAAiBC,SAAU5B,IAC3B,gBAAC,IAAD,CAAkB4B,SAAU5B,O,YC9DnB,qBACb,OACE,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAK6B,MAAO,WACPC,YAAW,wDAChB,gBAAC,EAAD","file":"component---src-pages-blog-tags-tsx-1dd9e616710d4b13e724.js","sourcesContent":["import * as React from \"react\"\r\nimport { graphql, useStaticQuery } from \"gatsby\"\r\nimport { Header, Label, Segment } from \"semantic-ui-react\"\r\nimport { formatPagePath } from \"../../utils\"\r\nimport { DesktopContainer, MobileContainer } from \"./container\"\r\nimport { ScreenSize, withScreenSize } from \"../common/with-screen-size\"\r\n\r\nconst alphabet = \"abcdefghijklmnopqrstuvwxyz\".split(\"\")\r\n\r\nconst AlphabeticalTagItem: React.FunctionComponent<ItemProps> = ({ items, alphabet }: ItemProps) => (\r\n  <Segment padded={\"very\"} vertical basic>\r\n    <Header as={\"h3\"} content={alphabet}/>\r\n    <Label.Group>\r\n      {\r\n        items.sort(({ tag: a }, { tag: b }) =>\r\n          (\"\" + a).localeCompare(b),\r\n        ).map(({ tag, count, link }) =>\r\n          <Label key={tag} href={link}>\r\n            {tag} ({count})\r\n          </Label>,\r\n        )\r\n      }\r\n    </Label.Group>\r\n  </Segment>\r\n)\r\n\r\nconst Content: React.FunctionComponent<{}> = () => {\r\n  const { tags }: QueryResult = useStaticQuery(graphql`\r\n    query {\r\n      tags: allMarkdownRemark {\r\n        group(field: frontmatter___tags) {\r\n          fieldValue\r\n          totalCount\r\n        }\r\n      }\r\n    }`,\r\n  )\r\n  const { group } = tags\r\n\r\n  return (\r\n    <div>\r\n      <Header as={\"h1\"} dividing>Tags</Header>\r\n      {\r\n        alphabet.map((value) => {\r\n          const tags = group.filter(({ fieldValue }) =>\r\n            fieldValue.toLowerCase().startsWith(value),\r\n          ).map(({ fieldValue, totalCount }) => ({\r\n            tag: fieldValue,\r\n            count: totalCount,\r\n            link: formatPagePath(0, \"tag\", fieldValue),\r\n          }))\r\n          if (tags && tags.length)\r\n            return (\r\n              <AlphabeticalTagItem key={value} items={tags} alphabet={value.toUpperCase()}/>\r\n            )\r\n        })\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nconst ResponsiveContent: React.FunctionComponent<Props> = ({ screenSize }: Props) => {\r\n  const content = <Content/>\r\n  return (\r\n    screenSize === \"mobile\" ?\r\n      <MobileContainer children={content}/> :\r\n      <DesktopContainer children={content}/>\r\n  )\r\n}\r\n\r\nexport default withScreenSize(ResponsiveContent)\r\n\r\ninterface ItemProps {\r\n  items: Array<{\r\n    tag: string\r\n    count: number\r\n    link?: string\r\n  }>\r\n  alphabet: string\r\n}\r\n\r\ninterface Props {\r\n  screenSize?: ScreenSize\r\n}\r\n\r\ninterface QueryResult {\r\n  tags: {\r\n    group: Array<{\r\n      fieldValue: string\r\n      totalCount: number\r\n    }>\r\n  }\r\n}\r\n","import Layout from \"../../components/layout\"\r\nimport BlogAllTags from \"../../components/blog/post-tags\"\r\nimport * as React from \"react\"\r\nimport SEO from \"../../components/common/seo\"\r\n\r\nexport default () => {\r\n  return (\r\n    <Layout>\r\n      <SEO title={'All tags'}\r\n           description={`List of tags used in Choi, Woohyeok's personal blog`}/>\r\n      <BlogAllTags/>\r\n    </Layout>\r\n  )\r\n}"],"sourceRoot":""}