{"version":3,"sources":["webpack:///./src/components/blog-recent-posts.tsx","webpack:///./src/components/blog-container.tsx","webpack:///./src/templates/blog-list.tsx","webpack:///./src/utils.ts","webpack:///./src/components/layout.tsx","webpack:///./src/components/blog-categories.tsx","webpack:///./src/components/blog-tags.tsx"],"names":["blog_recent_posts","posts","_2540428146","data","react","List","link","bulleted","edges","map","_ref","node","Item","as","href","fields","slug","origin","content","frontmatter","title","DesktopContainer","render","Responsive","minWidth","onlyComputer","Menu","secondary","pointing","fixed","inverted","style","backgroundColor","Container","key","header","fontSize","lineHeight","position","paddingTop","Grid","centered","container","Column","width","Segment","color","vertical","padded","Header","blog_categories","blog_tags","React","blog_container","blog_container_DesktopContainer","__webpack_require__","d","__webpack_exports__","query","pageContext","layout","formatReadableDate","formatPagePath","change_case__WEBPACK_IMPORTED_MODULE_0__","moment__WEBPACK_IMPORTED_MODULE_1__","date","moment","format","index","paramType","param","basePath","paramPath","changeCase","react__WEBPACK_IMPORTED_MODULE_0__","Layout","children","BlogCategories","items","_ref$activeCategory","activeCategory","category","react__WEBPACK_IMPORTED_MODULE_3__","semantic_ui_react__WEBPACK_IMPORTED_MODULE_4__","_ref2","count","active","props","categories","_public_static_d_243471705_json__WEBPACK_IMPORTED_MODULE_2__","totalCount","group","concat","_ref3","fieldValue","Object","assign","BlogTags","react__WEBPACK_IMPORTED_MODULE_2__","semantic_ui_react__WEBPACK_IMPORTED_MODULE_3__","Group","tag","tags","_public_static_d_84730814_json__WEBPACK_IMPORTED_MODULE_1__"],"mappings":"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","file":"component---src-templates-blog-list-tsx-bf2c4281ef568f949418.js","sourcesContent":["import * as React from \"react\"\nimport { List } from \"semantic-ui-react\"\nimport { graphql, useStaticQuery } from \"gatsby\"\nimport { MarkdownRemarkNodeType } from \"../types\"\n\nexport default () => {\n  const { posts }: QueryResult = useStaticQuery(graphql`\n    query {\n      posts: allMarkdownRemark(sort: {fields: frontmatter___date, order: DESC}, limit: 10) {\n        edges {\n          node {\n            frontmatter {\n              title\n            }\n            htmlAst\n            fields {\n              slug {\n                origin\n              }\n            }\n          }\n        }\n      }\n    }`\n  )\n  return (\n    <List link bulleted>\n      {\n        posts.edges.map(({ node }) =>\n          <List.Item as={\"a\"} href={node.fields.slug.origin} content={node.frontmatter.title}/>,\n        )\n      }\n    </List>\n  )\n}\n\n\ninterface QueryResult {\n  posts: {\n    edges: Array<MarkdownRemarkNodeType>\n  }\n}\n","import * as React from \"react\"\nimport { Container, Grid, Header, Menu, Sticky, Responsive, Segment } from \"semantic-ui-react\"\nimport BlogCategories from \"./blog-categories\"\nimport BlogTags from \"./blog-tags\"\nimport BlogRecentPosts from \"./blog-recent-posts\"\n\nclass DesktopContainer extends React.Component {\n  render(): React.ReactNode {\n    return (\n      <Responsive minWidth={Responsive.onlyComputer.minWidth}>\n        <Menu secondary pointing fixed={\"top\"} inverted style={{ backgroundColor: \"#1b1c1d\" }}>\n          <Container>\n            <Menu.Item key={\"header\"} header content={\"CHOI, WOOHYEOK's BLOG\"}\n                       style={{ fontSize: \"1.5em\", lineHeight: \"0.1em\" }}/>\n            <Menu.Item key={\"main\"} content={\"Go to main page\"} position={\"right\"} href={\"/\"}/>\n          </Container>\n        </Menu>\n        <div style={{ paddingTop: \"7.0em\" }}>\n          <Grid centered container>\n            <Grid.Column width={12}>\n              <Segment>\n                asdfasdf\n              </Segment>\n            </Grid.Column>\n            <Grid.Column width={4}>\n              <Segment color={'grey'} vertical padded>\n                <Header as={'h4'} content={'Categories'}/>\n                <BlogCategories/>\n              </Segment>\n              <Segment color={'grey'} vertical padded>\n                <Header as={'h4'} content={'Tags'}/>\n                <BlogTags/>\n              </Segment>\n              <Segment color={'grey'} vertical padded>\n                <Header as={'h4'} content={'Recent Posts'}/>\n                <BlogRecentPosts/>\n              </Segment>\n            </Grid.Column>\n          </Grid>\n        </div>\n      </Responsive>\n    )\n  }\n}\n\nexport default () => (\n  <div>\n    <DesktopContainer/>\n  </div>\n)\n\n\ninterface Props {\n  mode: \"list\" | \"content\"\n  header?: string\n  children: React.ReactNode\n  activeCategory?: string\n  pagination?: {\n    totalPages?: number\n    activePage?: number\n  }\n}","import * as React from 'react'\r\nimport { Container, Grid } from \"semantic-ui-react\"\r\nimport { graphql, navigate } from \"gatsby\"\r\nimport Layout from \"../components/layout\"\r\nimport BlogContainer from '../components/blog-container'\r\nimport { MarkdownRemarkNodeType } from \"../types\"\r\nimport { formatPagePath } from \"../utils\"\r\n\r\nexport default ({ data, pageContext } : Props) => {\r\n  return (\r\n    <Layout>\r\n      <BlogContainer/>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport const query = graphql`\r\n  query listBlogPosts($skip: Int!, $limit: Int!) {\r\n    posts: allMarkdownRemark(\r\n      sort: {\r\n        fields: frontmatter___date,\r\n        order: DESC\r\n      }\r\n      limit: $limit\r\n      skip: $skip\r\n    ) {\r\n      edges {\r\n        node {\r\n          id\r\n          excerpt\r\n          frontmatter {\r\n            title\r\n            date\r\n          }\r\n          fields {\r\n            slug {\r\n              origin\r\n            }\r\n            category {\r\n              name\r\n              slug\r\n            }\r\n            tags {\r\n              name\r\n              slug\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }`\r\n\r\ninterface PageContext {\r\n  currentPage: number\r\n  totalPage: number\r\n  limit: number\r\n  skip: number\r\n}\r\n\r\ninterface QueryResult {\r\n  posts: {\r\n    edges: Array<MarkdownRemarkNodeType>\r\n  }\r\n}\r\n\r\ninterface Props {\r\n  data: QueryResult\r\n  pageContext: PageContext\r\n}","import * as changeCase from \"change-case\"\nimport * as moment from \"moment\"\n\ntype ParamType = \"category\" | \"tag\" | \"none\"\n\nexport const formatBlogCategoryPath = (name: string) : string  => `/blog/categories/${changeCase.paramCase(name)}`\n\nexport const formatBlogTagPath = (name: string) : string => `/blog/tags/${changeCase.paramCase(name)}`\n\nexport const formatReadableDate = (date: string) : string => moment(`${date}`, \"YYYY-MM-DD HH:mm\").format(\"MMMM Do, YYYY HH:mm\")\n\nexport const formatUrlDate = (date: string) : string => moment(`${date}`, \"YYYY-MM-DD HH:mm\").format(\"YYYY-MM-DD-HH-mm\")\n\nexport const formatPostPath = (date: string, title: string, paramType: ParamType | string, param?: string | null) : string => {\n  let basePath = \"/blog\"\n  const paramPath = param ? changeCase.paramCase(param) : \"\"\n\n  if (paramType === \"category\") {\n    basePath = `/blog/categories/${paramPath}`\n  } else if (paramType === \"tag\") {\n    basePath = `/blog/tags/${paramPath}`\n  }\n\n  return `${basePath}/posts/${formatUrlDate(date)}-${changeCase.paramCase(title)}`\n}\n\nexport const formatPagePath = (index: number = 0, paramType: ParamType | string, param?: string | null) : string => {\n  let basePath = \"/blog\"\n  const paramPath = param ? changeCase.paramCase(param) : \"\"\n\n  if (paramType === \"category\") {\n    basePath = `/blog/categories/${paramPath}`\n  } else if (paramType === \"tag\") {\n    basePath = `/blog/tags/${paramPath}`\n  }\n\n  if (index !== 0) {\n    basePath = `${basePath}/pages/${index + 1}`\n  }\n\n  return basePath\n}\n\n\n\n\n","import * as React from 'react'\nimport 'semantic-ui-css/semantic.min.css'\nimport \"slick-carousel/slick/slick.css\";\nimport \"slick-carousel/slick/slick-theme.css\"\nimport '../layout.css'\n\nconst Layout: React.FunctionComponent<Props> = ({\n  children\n}) => {\n  return (\n    <div>\n      { children }\n    </div>\n  )\n}\n\ninterface Props {\n  children: React.ReactNode\n}\n\nexport default Layout","import * as React from \"react\"\nimport { List } from \"semantic-ui-react\"\nimport { graphql, useStaticQuery } from \"gatsby\"\nimport { formatPagePath } from \"../utils\"\n\nconst BlogCategories: React.FunctionComponent<Props> = ({ items, activeCategory = items[0].category }) => {\n  return (\n    <List link bulleted>\n      {\n        items.map(({ category, link, count }) =>\n          <List.Item key={category}\n                     href={link}\n                     active={activeCategory === category}>\n            {category} ({count})\n          </List.Item>,\n        )\n      }\n    </List>\n  )\n}\n\nexport default (props: DefaultProps) => {\n  const { categories }: QueryResult = useStaticQuery(graphql`\n    query {\n      categories: allMarkdownRemark {\n        group(field: frontmatter___category) {\n          fieldValue\n          totalCount\n        }\n        totalCount\n      }\n    }`,\n  )\n  const { totalCount, group } = categories\n  const items = [\n    {\n      category: \"All\",\n      count: totalCount,\n      link: formatPagePath(0, \"none\"),\n    },\n    ...group.map(({ fieldValue, totalCount }) => ({\n      category: fieldValue,\n      count: totalCount,\n      link: formatPagePath(0, \"category\", fieldValue),\n    })),\n  ]\n\n  return (\n    <BlogCategories items={items} {...props} />\n  )\n}\n\ninterface QueryResult {\n  categories: {\n    group: Array<{\n      fieldValue\n      totalCount\n    }>\n    totalCount: number\n  }\n}\n\ninterface DefaultProps {\n  activeCategory?: string\n}\n\ninterface Props extends DefaultProps {\n  items: Array<{\n    category: string\n    count?: number\n    link?: string\n  }>\n}","import * as React from \"react\"\nimport { Label } from \"semantic-ui-react\"\nimport { graphql, useStaticQuery } from \"gatsby\"\nimport { formatPagePath } from \"../utils\"\n\nconst BlogTags: React.FunctionComponent<Props> = ({ items }) => {\n  return (\n    <Label.Group>\n      {\n        items.map(({ tag, link, count }) =>\n          <Label key={tag} as={\"a\"} href={link}>\n            {tag} ({count})\n          </Label>,\n        )\n      }\n    </Label.Group>\n  )\n}\n\nexport default () => {\n  const { tags }: QueryResult = useStaticQuery(graphql`\n    query {\n      tags: allMarkdownRemark {\n        group(field: frontmatter___tags) {\n          fieldValue\n          totalCount\n        }\n      }\n    }`,\n  )\n  return (\n    <BlogTags items={\n      tags.group.map(({ fieldValue, totalCount }) => ({\n        tag: fieldValue,\n        count: totalCount,\n        link: formatPagePath(0, \"tag\", fieldValue),\n      }))\n    }/>\n  )\n}\n\n\ninterface QueryResult {\n  tags: {\n    group: Array<{\n      fieldValue: string\n      totalCount: number\n    }>\n  }\n}\n\ninterface Props {\n  items: Array<{\n    tag: string\n    count: number\n    link?: string\n  }>\n}"],"sourceRoot":""}