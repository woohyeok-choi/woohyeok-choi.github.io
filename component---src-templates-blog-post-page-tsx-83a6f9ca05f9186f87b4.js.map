{"version":3,"sources":["webpack:///./src/components/blog/main-post-page.tsx","webpack:///./src/templates/blog-post-page.tsx","webpack:///./node_modules/core-js/modules/es6.function.name.js"],"names":["main_post_page","_ref","data","prevPost","nextPost","node","frontmatter","html","fields","title","date","category","tags","react","container","Header","as","dividing","Subheader","href","slug","target","linked_span","inverted","children","name","formatReadableDate","Segment","vertical","padded","basic","dangerouslySetInnerHTML","__html","style","fontSize","fontWeight","fontStyle","Label","Group","display","map","tag","key","content","Grid","columns","stackable","Column","textAlign","__webpack_exports__","pageContext","excerpt","lang","layout","seo","keywords","concat","_ref2","description","query","dP","__webpack_require__","f","FProto","Function","prototype","nameRE","configurable","get","this","match","e"],"mappings":"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","file":"component---src-templates-blog-post-page-tsx-83a6f9ca05f9186f87b4.js","sourcesContent":["import * as React from \"react\"\nimport { MarkdownRemarkNodeType } from \"../../types\"\nimport { Label, Header, Segment, Grid } from \"semantic-ui-react\"\nimport BlogContainer from './container'\nimport { formatReadableDate } from '../../utils'\nimport LinkedSpan from \"../common/linked-span\"\n\nexport default ( { data, prevPost, nextPost } : Props) => {\n  const { node } = data\n  const { frontmatter, html, fields } = node\n  const { title, date } = frontmatter\n  const { category, tags } = fields\n\n  return (\n    <BlogContainer>\n      <Header as={'h1'} dividing>\n        <Header.Subheader>\n          Category: <a href={category.slug} target={'_blank'}>\n            <LinkedSpan inverted={false} children={category.name}/>\n          </a>\n        </Header.Subheader>\n        {title}\n        <Header.Subheader>\n          { formatReadableDate(date) }\n        </Header.Subheader>\n      </Header>\n      <Segment vertical padded basic>\n        <div dangerouslySetInnerHTML={{__html: html}}/>\n      </Segment>\n      { tags &&\n      <Segment vertical padded={'very'}>\n        <span style={{fontSize: '16px', fontWeight: 'bold', fontStyle: 'italic'}}>Tagged with </span>\n        <Label.Group style={{display: 'inline'}}>\n          { tags.map(tag => <Label key={tag.name} href={tag.slug} content={tag.name}/>) }\n        </Label.Group>\n      </Segment>\n      }\n      <Grid columns={2} as={Segment} vertical stackable>\n        <Grid.Column textAlign={'left'}>\n          { prevPost &&\n            <Header as={'h3'}>\n              Previous post\n              <Header.Subheader style={{fontSize: '16px'}}>\n                <a href={prevPost.slug}>\n                  <LinkedSpan inverted={false} children={prevPost.title}/>\n                </a>\n              </Header.Subheader>\n            </Header>\n          }\n        </Grid.Column>\n        <Grid.Column textAlign={'right'}>\n            { nextPost &&\n              <Header as={'h3'}>\n                Next post\n                <Header.Subheader style={{fontSize: '16px'}}>\n                  <a href={nextPost.slug}>\n                    <LinkedSpan inverted={false} children={nextPost.title}/>\n                  </a>\n                </Header.Subheader>\n              </Header>\n            }\n        </Grid.Column>\n      </Grid>\n    </BlogContainer>\n  )\n}\n\ninterface Props {\n  data: MarkdownRemarkNodeType\n  prevPost?: {\n    title?: string\n    slug?: string\n  }\n  nextPost?: {\n    title?: string\n    slug?: string\n  }\n}","import * as React from 'react'\nimport Layout from \"../components/common/layout\"\nimport BlogContent from '../components/blog/main-post-page'\nimport { MarkdownRemarkNodeType } from \"../types\"\nimport { graphql } from \"gatsby\"\nimport SEO from \"../components/common/seo\"\n\nexport default ({ data, pageContext } : Props) => {\n  const { node } = data\n  const { frontmatter, fields, excerpt } = node\n  const { title, lang } = frontmatter\n  const { category, tags } = fields\n  const { nextPost, prevPost } = pageContext\n\n  return (\n    <Layout>\n      <SEO title={ title }\n           lang={ lang }\n           keywords={[category.name, ...tags.map(({name}) => name)]}\n           description={ excerpt }/>\n      <BlogContent data={data} nextPost={nextPost} prevPost={prevPost}/>\n    </Layout>\n  )\n}\n\ninterface Props {\n  data: MarkdownRemarkNodeType\n  pageContext: {\n    nextPost?: {\n      title?: string\n      slug?: string\n    }\n    prevPost?: {\n      title?: string\n      slug?: string\n    }\n  }\n}\n\nexport const query = graphql`\n  query getPosts($slug: String!) {\n    node: markdownRemark(fields: {\n      slug: {\n        eq: $slug\n      }\n    }) {\n      html\n      excerpt(pruneLength: 140)\n      frontmatter {\n        title\n        date\n        lang\n      }\n      fields {\n        category {\n          name\n          slug\n        }\n        tags {\n          name\n          slug\n        }\n      }\n    }\n  }`","var dP = require('./_object-dp').f;\nvar FProto = Function.prototype;\nvar nameRE = /^\\s*function ([^ (]*)/;\nvar NAME = 'name';\n\n// 19.2.4.2 name\nNAME in FProto || require('./_descriptors') && dP(FProto, NAME, {\n  configurable: true,\n  get: function () {\n    try {\n      return ('' + this).match(nameRE)[1];\n    } catch (e) {\n      return '';\n    }\n  }\n});\n"],"sourceRoot":""}