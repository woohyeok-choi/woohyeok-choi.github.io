{"version":3,"sources":["webpack:///./src/components/common/disqus.jsx","webpack:///./src/components/blog/main-post-page.tsx","webpack:///./src/templates/blog-post-page.tsx","webpack:///./src/utils.ts","webpack:///./src/components/common/linked-span.tsx","webpack:///./src/components/common/layout.tsx","webpack:///./src/components/common/seo.tsx","webpack:///./src/components/common/footer.tsx","webpack:///./src/components/blog/sub-categories.tsx","webpack:///./src/components/blog/sub-tags.tsx","webpack:///./src/components/blog/sub-recent-posts.tsx","webpack:///./src/components/blog/container.tsx"],"names":["Disqus","render","shortName","this","props","config","url","identifier","title","react_default","a","createElement","lib","shortname","React","Component","propTypes","PropTypes","string","main_post_page","_ref","data","prevPost","nextPost","address","node","id","frontmatter","html","fields","date","category","tags","siteMetadata","slug","_1497630466","site","react","container","Header","as","dividing","Subheader","href","target","linked_span","inverted","children","name","formatReadableDate","Segment","vertical","padded","basic","dangerouslySetInnerHTML","__html","style","fontSize","fontWeight","fontStyle","Label","Group","display","map","tag","key","content","disqusShortname","disqus","Grid","columns","stackable","Column","textAlign","__webpack_exports__","pageContext","location","excerpt","lang","layout","seo","keywords","concat","_ref2","description","query","__webpack_require__","d","formatPagePath","change_case__WEBPACK_IMPORTED_MODULE_0__","moment__WEBPACK_IMPORTED_MODULE_1__","moment","format","index","paramType","param","basePath","paramPath","changeCase","hoverColor","boxColor","textColor","defaultColor","invertedHoverColor","invertedDefaultColor","LinkedSpan","state","isMouseOn","handleMouseEnter","_this","setState","handleMouseLeave","_this$props","_this$props$inverted","lineColor","color","react__WEBPACK_IMPORTED_MODULE_1__","backgroundColor","boxShadow","onMouseEnter","onMouseLeave","react__WEBPACK_IMPORTED_MODULE_0__","Layout","_ref$lang","_ref$keywords","_ref$description","_public_static_d_2695700021_json__WEBPACK_IMPORTED_MODULE_0__","metaDescription","defaultMetadata","property","author","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","htmlAttribute","link","rel","titleTemplate","meta","length","join","semantic_ui_react__WEBPACK_IMPORTED_MODULE_1__","semantic_ui_react__WEBPACK_IMPORTED_MODULE_2__","_linked_span__WEBPACK_IMPORTED_MODULE_3__","Categories","items","List","bulleted","count","Item","sub_categories","categories","_243471705","totalCount","group","_ref3","fieldValue","sub_categories_Categories","BlogTags","sub_tags","_ref3$limit","limit","_84730814","sub_tags_BlogTags","sort","_ref4","_ref5","slice","_ref6","sub_recent_posts","posts","_3672802271","edges","Menu","secondary","pointing","fixed","Container","header","lineHeight","position","paddingTop","centered","width","float","footer"],"mappings":"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","file":"component---src-templates-blog-post-page-tsx-dc703cb68b6c4de9c5ce.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { CommentCount, DiscussionEmbed } from \"disqus-react\"\n\nclass Disqus extends React.Component {\n  render() {\n    const { shortName } = this.props\n    const config = {\n      url: this.props.url,\n      identifier: this.props.identifier,\n      title: this.props.title\n    }\n\n    return (\n      <div>\n        <DiscussionEmbed shortname={shortName} config={config}/>\n      </div>\n    )\n  }\n}\n\n\nDisqus.propTypes = {\n  shortName: PropTypes.string,\n  url: PropTypes.string,\n  identifier: PropTypes.string,\n  title: PropTypes.string\n}\n\nexport default Disqus","import * as React from \"react\"\r\nimport { MarkdownRemarkNodeType } from \"../../types\"\r\nimport { Label, Header, Segment, Grid } from \"semantic-ui-react\"\r\nimport BlogContainer from './container'\r\nimport Disqus from '../common/disqus'\r\nimport { formatReadableDate } from '../../utils'\r\nimport LinkedSpan from \"../common/linked-span\"\r\nimport { graphql, useStaticQuery } from \"gatsby\"\r\n\r\nexport default ( { data, prevPost, nextPost, address } : Props) => {\r\n  const { node } = data\r\n  const { id, frontmatter, html, fields } = node\r\n  const { title, date } = frontmatter\r\n  const { category, tags, slug } = fields\r\n  const { site }: QueryResult = useStaticQuery(graphql`\r\n    {\r\n      site {\r\n        siteMetadata {\r\n          disqusShortname\r\n        }\r\n      }\r\n    }\r\n  `)\r\n  const { siteMetadata } = site\r\n  return (\r\n    <BlogContainer>\r\n      <Header as={'h1'} dividing>\r\n        <Header.Subheader>\r\n          Category: <a href={category.slug} target={'_blank'}>\r\n            <LinkedSpan inverted={false} children={category.name}/>\r\n          </a>\r\n        </Header.Subheader>\r\n        {title}\r\n        <Header.Subheader>\r\n          { formatReadableDate(date) }\r\n        </Header.Subheader>\r\n      </Header>\r\n      <Segment vertical padded basic>\r\n        <div dangerouslySetInnerHTML={{__html: html}}/>\r\n      </Segment>\r\n      { tags &&\r\n      <Segment vertical padded={'very'}>\r\n        <span style={{fontSize: '16px', fontWeight: 'bold', fontStyle: 'italic'}}>Tagged with </span>\r\n        <Label.Group style={{display: 'inline'}}>\r\n          { tags.map(tag => <Label key={tag.name} href={tag.slug} content={tag.name}/>) }\r\n        </Label.Group>\r\n      </Segment>\r\n      }\r\n      {\r\n        siteMetadata.disqusShortname &&\r\n        <Segment vertical padded={'very'}>\r\n          <Disqus shortName={siteMetadata.disqusShortname}\r\n                  title={title}\r\n                  identifier={id}\r\n                  url={address}\r\n          />\r\n        </Segment>\r\n      }\r\n      <Grid columns={2} as={Segment} vertical stackable padded>\r\n        <Grid.Column textAlign={'left'}>\r\n          { prevPost &&\r\n            <Header as={'h3'}>\r\n              Previous post\r\n              <Header.Subheader style={{fontSize: '16px'}}>\r\n                <a href={prevPost.slug}>\r\n                  <LinkedSpan inverted={false} children={prevPost.title}/>\r\n                </a>\r\n              </Header.Subheader>\r\n            </Header>\r\n          }\r\n        </Grid.Column>\r\n        <Grid.Column textAlign={'right'}>\r\n            { nextPost &&\r\n              <Header as={'h3'}>\r\n                Next post\r\n                <Header.Subheader style={{fontSize: '16px'}}>\r\n                  <a href={nextPost.slug}>\r\n                    <LinkedSpan inverted={false} children={nextPost.title}/>\r\n                  </a>\r\n                </Header.Subheader>\r\n              </Header>\r\n            }\r\n        </Grid.Column>\r\n      </Grid>\r\n    </BlogContainer>\r\n  )\r\n}\r\n\r\ninterface QueryResult {\r\n  site: {\r\n    siteMetadata: {\r\n      disqusShortname?: string\r\n    }\r\n  }\r\n}\r\n\r\ninterface Props {\r\n  data: MarkdownRemarkNodeType\r\n  address: string\r\n  prevPost?: {\r\n    title?: string\r\n    slug?: string\r\n  }\r\n  nextPost?: {\r\n    title?: string\r\n    slug?: string\r\n  }\r\n}","import * as React from 'react'\nimport Layout from \"../components/common/layout\"\nimport BlogContent from '../components/blog/main-post-page'\nimport { MarkdownRemarkNodeType } from \"../types\"\nimport { graphql } from \"gatsby\"\nimport SEO from \"../components/common/seo\"\n\nexport default ( { data, pageContext, location } : Props) => {\n  const { node } = data\n  const { frontmatter, fields, excerpt } = node\n  const { title, lang } = frontmatter\n  const { category, tags } = fields\n  const { nextPost, prevPost } = pageContext\n\n  return (\n    <Layout>\n      <SEO title={ title }\n           lang={ lang }\n           keywords={[category.name, ...tags.map(({name}) => name)]}\n           description={ excerpt }/>\n      <BlogContent data={data} nextPost={nextPost} prevPost={prevPost} address={location.href}/>\n    </Layout>\n  )\n}\n\n\ninterface Props {\n  data: MarkdownRemarkNodeType\n  location?: {\n    href: string\n  }\n  pageContext: {\n    nextPost?: {\n      title?: string\n      slug?: string\n    }\n    prevPost?: {\n      title?: string\n      slug?: string\n    }\n  }\n}\n\nexport const query = graphql`\n  query getPosts($slug: String!) {\n    node: markdownRemark(fields: {\n      slug: {\n        eq: $slug\n      }\n    }) {\n      id\n      html\n      excerpt(pruneLength: 140)\n      frontmatter {\n        title\n        date\n        lang\n      }\n      fields {\n        slug\n        category {\n          name\n          slug\n        }\n        tags {\n          name\n          slug\n        }\n      }\n    }\n  }`","import * as changeCase from \"change-case\"\nimport * as moment from \"moment\"\n\ntype ParamType = \"category\" | \"tag\" | \"none\"\n\nexport const formatBlogCategoryPath = (name: string) : string  => `/blog/categories/${changeCase.paramCase(name)}`\n\nexport const formatBlogTagPath = (name: string) : string => `/blog/tags/${changeCase.paramCase(name)}`\n\nexport const formatReadableDate = (date: string) : string => moment(`${date}`, \"YYYY-MM-DD HH:mm\").format(\"MMMM Do, YYYY HH:mm\")\n\nexport const formatUrlDate = (date: string) : string => moment(`${date}`, \"YYYY-MM-DD HH:mm\").format(\"YYYY-MM-DD-HH-mm\")\n\nexport const formatPostPath = (date: string, title: string, paramType: ParamType | string, param?: string | null) : string => {\n  let basePath = \"/blog\"\n  const paramPath = param ? changeCase.paramCase(param) : \"\"\n\n  if (paramType === \"category\") {\n    basePath = `/blog/categories/${paramPath}`\n  } else if (paramType === \"tag\") {\n    basePath = `/blog/tags/${paramPath}`\n  }\n\n  return `${basePath}/posts/${formatUrlDate(date)}-${changeCase.paramCase(title)}`\n}\n\nexport const formatPagePath = (index: number = 0, paramType: 'category' | 'tag', param?: string | null) : string => {\n  let basePath = \"/blog\"\n  const paramPath = param ? changeCase.paramCase(param) : \"\"\n\n  if (paramPath) {\n    if (paramType === \"category\") {\n      basePath = `/blog/categories/${paramPath}`\n    } else if (paramType === \"tag\") {\n      basePath = `/blog/tags/${paramPath}`\n    }\n  }\n\n  if (index !== 0) {\n    basePath = `${basePath}/pages/${index + 1}`\n  }\n\n  return basePath\n}\n\n\n\n\n","import * as React from 'react'\n\nconst hoverColor = {\n  boxColor: 'rgba(0, 0, 0, .87)',\n  textColor: 'rgba(255, 255, 255, .9)'\n}\n\nconst defaultColor = {\n  boxColor: 'rgba(255, 255, 255, 0)',\n  textColor: 'rgba(0, 0, 0, .6)'\n}\n\nconst invertedHoverColor = {\n  boxColor: 'rgba(255, 255, 255, .9)',\n  textColor: 'rgba(0, 0, 0, .85)'\n}\n\nconst invertedDefaultColor = {\n  boxColor: 'rgba(255, 255, 255, 0)',\n  textColor: 'rgba(255, 255, 255, .9)'\n}\n\nconst shadowColor = 'rgba(0, 0, 0, .13)'\n\nconst invertedShadowColor = 'rgba(255, 255, 255, .9)'\n\nexport default class LinkedSpan extends React.Component<Props, State> {\n  state: State = {\n    isMouseOn: false\n  }\n\n  handleMouseEnter = () => this.setState({isMouseOn: true})\n\n  handleMouseLeave = () => this.setState({isMouseOn: false})\n\n  render(): React.ReactNode {\n    const { children, inverted = false } = this.props\n    const { isMouseOn } = this.state\n\n    const lineColor = inverted ? invertedShadowColor : shadowColor\n\n    const color = inverted ? (\n      isMouseOn ? invertedHoverColor : invertedDefaultColor\n    ) : (\n      isMouseOn ? hoverColor : defaultColor\n    )\n\n    return(\n      <span style={{backgroundColor: color.boxColor, boxShadow: `inset 0 -2px 0px 0px ${lineColor}`, color: color.textColor }} onMouseEnter={this.handleMouseEnter} onMouseLeave={this.handleMouseLeave}>\n        { children }\n      </span>\n    )\n  }\n\n}\n\ninterface Props {\n  children: React.ReactNode\n  inverted?: boolean\n}\n\ninterface State {\n  isMouseOn: boolean\n}","import * as React from 'react'\r\nimport 'semantic-ui-css/semantic.min.css'\r\nimport \"slick-carousel/slick/slick.css\";\r\nimport \"slick-carousel/slick/slick-theme.css\"\r\nimport '../../layout.css'\r\n\r\nconst Layout: React.FunctionComponent<Props> = ({\r\n  children\r\n}) => {\r\n  return (\r\n    <div>\r\n      { children }\r\n    </div>\r\n  )\r\n}\r\n\r\ninterface Props {\r\n  children: React.ReactNode\r\n}\r\n\r\nexport default Layout","import * as React from \"react\"\r\nimport Helmet from \"react-helmet\"\r\nimport { useStaticQuery, graphql } from \"gatsby\"\r\n\r\ninterface Props {\r\n  description?: string\r\n  lang?: string\r\n  keywords?: Array<string>\r\n  title: string\r\n}\r\n\r\ninterface QueryResult {\r\n  site: {\r\n    siteMetadata: {\r\n      title?: string\r\n      description?: string\r\n      author?: string\r\n    }\r\n  }\r\n}\r\n\r\nexport default ({ lang = 'en', keywords = [], title, description = ''}: Props) => {\r\n  const { site } : QueryResult= useStaticQuery(graphql`\r\n  query DefaultSEOQuery {\r\n    site {\r\n      siteMetadata {\r\n        title\r\n        description\r\n        author\r\n      }\r\n    }\r\n  }`)\r\n  const { siteMetadata } = site\r\n\r\n  const metaDescription = description || siteMetadata.description\r\n  const defaultMetadata = [\r\n    {\r\n      name: `description`,\r\n      content: metaDescription,\r\n    },\r\n    {\r\n      property: `og:title`,\r\n      content: title,\r\n    },\r\n    {\r\n      property: `og:site_name`,\r\n      content: siteMetadata.title\r\n    },\r\n    {\r\n      property: `og:description`,\r\n      content: metaDescription,\r\n    },\r\n    {\r\n      property: `og:type`,\r\n      content: `website`,\r\n    },\r\n    {\r\n      name: `twitter:card`,\r\n      content: `summary`,\r\n    },\r\n    {\r\n      name: `twitter:creator`,\r\n      content: siteMetadata.author,\r\n    },\r\n    {\r\n      name: `twitter:title`,\r\n      content: title,\r\n    },\r\n    {\r\n      name: `twitter:description`,\r\n      content: metaDescription,\r\n    },\r\n  ]\r\n\r\n  return (\r\n    <Helmet\r\n      htmlAttribute={{\r\n        lang\r\n      }}\r\n      link={[\r\n        {\r\n          rel: 'stylesheet',\r\n          href: 'https://cdn.rawgit.com/jpswalsh/academicons/master/css/academicons.min.css'\r\n        }\r\n      ]}\r\n      title={title}\r\n      titleTemplate={`%s | ${siteMetadata.title}`}\r\n      meta={\r\n        defaultMetadata.concat(keywords.length ? { name: 'keywords', content: keywords.join(', ') } : [])\r\n      }\r\n    />\r\n  )\r\n}\r\n","import * as React from \"react\"\nimport { Container, Segment } from \"semantic-ui-react\"\nimport LinkedSpan from \"./linked-span\"\n\nexport default () => (\n  <Segment inverted padded vertical textAlign={\"center\"}>\n    <Container>\n      <p>\n        Made by Choi, Woohyeok (woohyeok.choi (at) kaist.ac.kr) &copy; 2019; built with <a\n        href=\"https://www.gatsbyjs.org\" target={\"_blank\"}><LinkedSpan inverted={true} children={'Gatsby'}/></a>; sources are available at <a href={'https://github.com/woohyeok-choi/woohyeok-choi.github.io'} target={'_blank'}><LinkedSpan inverted={true} children={'this repo.'}/></a>\n      </p>\n    </Container>\n  </Segment>\n)","import * as React from \"react\"\nimport { List } from \"semantic-ui-react\"\nimport { graphql, useStaticQuery } from \"gatsby\"\nimport { formatPagePath } from \"../../utils\"\n\nconst Categories: React.FunctionComponent<Props> = ({ items }) => {\n  return (\n    <List link bulleted>\n      {\n        items.map(({ category, link, count }) =>\n          <List.Item key={category}\n                     href={link}>\n            {category} ({count})\n          </List.Item>\n        )\n      }\n    </List>\n  )\n}\n\nexport default () => {\n  const { categories }: QueryResult = useStaticQuery(graphql`\n    query {\n      categories: allMarkdownRemark {\n        group(field: frontmatter___category) {\n          fieldValue\n          totalCount\n        }\n        totalCount\n      }\n    }`,\n  )\n  const { totalCount, group } = categories\n  const items = [\n    {\n      category: \"All\",\n      count: totalCount,\n      link: formatPagePath(0, \"category\"),\n    },\n    ...group.map(({ fieldValue, totalCount }) => ({\n      category: fieldValue,\n      count: totalCount,\n      link: formatPagePath(0, \"category\", fieldValue),\n    })),\n  ]\n\n  return (\n    <Categories items={items} />\n  )\n}\n\ninterface QueryResult {\n  categories: {\n    group: Array<{\n      fieldValue\n      totalCount\n    }>\n    totalCount: number\n  }\n}\n\n\ninterface Props {\n  items: Array<{\n    category: string\n    count?: number\n    link?: string\n  }>\n}","import * as React from \"react\"\r\nimport { Label } from \"semantic-ui-react\"\r\nimport { graphql, useStaticQuery } from \"gatsby\"\r\nimport { formatPagePath } from \"../../utils\"\r\n\r\nconst BlogTags: React.FunctionComponent<Props> = ({ items }) => {\r\n  return (\r\n    <Label.Group>\r\n      {\r\n        items.map(({ tag, link, count }) =>\r\n          <Label key={tag} as={\"a\"} href={link}>\r\n            {tag} ({count})\r\n          </Label>\r\n        )\r\n      }\r\n    </Label.Group>\r\n  )\r\n}\r\n\r\nexport default ({ limit = 10 }: DefaultProps) => {\r\n  const { tags }: QueryResult = useStaticQuery(graphql`\r\n    query {\r\n      tags: allMarkdownRemark {\r\n        group(field: frontmatter___tags) {\r\n          fieldValue\r\n          totalCount\r\n        }\r\n      }\r\n    }`,\r\n  )\r\n\r\n  const { group } = tags\r\n\r\n  return (\r\n    <BlogTags items={\r\n      group\r\n        .sort(({totalCount: a}, {totalCount: b}) => b - a)\r\n        .slice(0, limit)\r\n        .map(({ fieldValue, totalCount }) => ({\r\n          tag: fieldValue,\r\n          count: totalCount,\r\n          link: formatPagePath(0, \"tag\", fieldValue),\r\n        }))\r\n    }/>\r\n  )\r\n}\r\n\r\n\r\ninterface QueryResult {\r\n  tags: {\r\n    group: Array<{\r\n      fieldValue: string\r\n      totalCount: number\r\n    }>\r\n  }\r\n}\r\n\r\ninterface DefaultProps {\r\n  limit?: number\r\n}\r\n\r\ninterface Props extends DefaultProps {\r\n  items: Array<{\r\n    tag: string\r\n    count: number\r\n    link?: string\r\n  }>\r\n}","import * as React from \"react\"\nimport { List } from \"semantic-ui-react\"\nimport { graphql, useStaticQuery } from \"gatsby\"\nimport { MarkdownRemarkNodeType } from \"../../types\"\n\nexport default () => {\n  const { posts }: QueryResult = useStaticQuery(graphql`\n    query {\n      posts: allMarkdownRemark(sort: {fields: frontmatter___date, order: DESC}, limit: 10) {\n        edges {\n          node {\n            frontmatter {\n              title\n            }\n            htmlAst\n            fields {\n              slug \n            }\n          }\n        }\n      }\n    }`\n  )\n  return (\n    <List link bulleted>\n      {\n        posts.edges.map(({ node }) =>\n          <List.Item key={node.fields.slug} as={\"a\"} href={node.fields.slug} content={node.frontmatter.title}/>,\n        )\n      }\n    </List>\n  )\n}\n\n\ninterface QueryResult {\n  posts: {\n    edges: Array<MarkdownRemarkNodeType>\n  }\n}\n","import * as React from \"react\"\nimport { Container, Grid, Header, Menu, Segment } from \"semantic-ui-react\"\nimport BlogCategories from \"./sub-categories\"\nimport BlogTags from \"./sub-tags\"\nimport BlogRecentPosts from \"./sub-recent-posts\"\nimport Footer from \"../common/footer\"\nimport LinkedSpan from \"../common/linked-span\"\n\nexport default ({ children } : Props) => (\n  <div>\n    <Menu secondary pointing fixed={\"top\"} inverted style={{ backgroundColor: \"#1b1c1d\" }}>\n      <Container>\n        <Menu.Item key={\"header\"} header content={\"CHOI, WOOHYEOK's BLOG\"}\n                   style={{ fontSize: \"1.5em\", lineHeight: \"0.1em\" }}/>\n        <Menu.Item key={\"main\"} content={\"Go to main page\"} position={\"right\"} href={\"/\"}/>\n      </Container>\n    </Menu>\n    <div style={{ paddingTop: \"7.0em\" }}>\n      <Grid centered container stackable>\n        <Grid.Column width={12}>\n          { children }\n        </Grid.Column>\n        <Grid.Column width={4}>\n          <Segment color={\"grey\"} vertical padded>\n            <Header as={\"h4\"} content={\"Categories\"}/>\n            <BlogCategories />\n          </Segment>\n          <Segment color={\"grey\"} vertical padded>\n            <Header as={\"h4\"}>\n              Tags\n              <Header.Subheader style={{display: 'inline', float: 'right'}} as={'a'} href={'/blog/tags'}>\n                <LinkedSpan inverted={false} children={'View all tags...'}/>\n              </Header.Subheader>\n            </Header>\n            <BlogTags limit={10}/>\n          </Segment>\n          <Segment color={\"grey\"} vertical padded>\n            <Header as={\"h4\"} content={\"Recent Posts\"}/>\n            <BlogRecentPosts/>\n          </Segment>\n        </Grid.Column>\n      </Grid>\n      <Footer/>\n    </div>\n  </div>\n)\n\ninterface Props {\n  children?: React.ReactNode\n}"],"sourceRoot":""}